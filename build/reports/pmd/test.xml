<?xml version="1.0" encoding="UTF-8"?>
<pmd version="5.8.1" timestamp="2018-06-02T17:09:20.652">
<file name="D:\Files\Progetti\Gradle\progetto1718-nygaard\src\test\java\it\uniba\controller\ControllerTester.java">
<violation beginline="19" endline="19" begincolumn="1" endcolumn="38" rule="ImportFromSamePackage" ruleset="Import Statements" package="it.uniba.controller" class="ControllerTester" externalInfoUrl="https://pmd.github.io/pmd-5.8.1/pmd-java/rules/java/imports.html#ImportFromSamePackage" priority="3">
No need to import a type that lives in the same package
</violation>
<violation beginline="87" endline="87" begincolumn="48" endcolumn="73" rule="LawOfDemeter" ruleset="Coupling" package="it.uniba.controller" class="ControllerTester" method="parsedUsersMatchPrintedUsers" externalInfoUrl="https://pmd.github.io/pmd-5.8.1/pmd-java/rules/java/coupling.html#LawOfDemeter" priority="3">
Potential violation of Law of Demeter (method chain calls)
</violation>
<violation beginline="99" endline="99" begincolumn="23" endcolumn="47" rule="LawOfDemeter" ruleset="Coupling" package="it.uniba.controller" class="ControllerTester" method="parsedUsersMatchPrintedUsers" externalInfoUrl="https://pmd.github.io/pmd-5.8.1/pmd-java/rules/java/coupling.html#LawOfDemeter" priority="3">
Potential violation of Law of Demeter (object not created locally)
</violation>
<violation beginline="100" endline="100" begincolumn="23" endcolumn="46" rule="LawOfDemeter" ruleset="Coupling" package="it.uniba.controller" class="ControllerTester" method="parsedUsersMatchPrintedUsers" externalInfoUrl="https://pmd.github.io/pmd-5.8.1/pmd-java/rules/java/coupling.html#LawOfDemeter" priority="3">
Potential violation of Law of Demeter (object not created locally)
</violation>
<violation beginline="101" endline="101" begincolumn="46" endcolumn="60" rule="LawOfDemeter" ruleset="Coupling" package="it.uniba.controller" class="ControllerTester" method="parsedUsersMatchPrintedUsers" externalInfoUrl="https://pmd.github.io/pmd-5.8.1/pmd-java/rules/java/coupling.html#LawOfDemeter" priority="3">
Potential violation of Law of Demeter (object not created locally)
</violation>
<violation beginline="112" endline="112" begincolumn="40" endcolumn="125" rule="AvoidInstantiatingObjectsInLoops" ruleset="Optimization" package="it.uniba.controller" class="ControllerTester" method="parsedUsersMatchPrintedUsers" externalInfoUrl="https://pmd.github.io/pmd-5.8.1/pmd-java/rules/java/optimizations.html#AvoidInstantiatingObjectsInLoops" priority="3">
Avoid instantiating new objects inside loops
</violation>
<violation beginline="113" endline="113" begincolumn="38" endcolumn="132" rule="AvoidInstantiatingObjectsInLoops" ruleset="Optimization" package="it.uniba.controller" class="ControllerTester" method="parsedUsersMatchPrintedUsers" externalInfoUrl="https://pmd.github.io/pmd-5.8.1/pmd-java/rules/java/optimizations.html#AvoidInstantiatingObjectsInLoops" priority="3">
Avoid instantiating new objects inside loops
</violation>
<violation beginline="113" endline="113" begincolumn="49" endcolumn="102" rule="LawOfDemeter" ruleset="Coupling" package="it.uniba.controller" class="ControllerTester" method="parsedUsersMatchPrintedUsers" externalInfoUrl="https://pmd.github.io/pmd-5.8.1/pmd-java/rules/java/coupling.html#LawOfDemeter" priority="3">
Potential violation of Law of Demeter (method chain calls)
</violation>
<violation beginline="113" endline="113" begincolumn="49" endcolumn="102" rule="LawOfDemeter" ruleset="Coupling" package="it.uniba.controller" class="ControllerTester" method="parsedUsersMatchPrintedUsers" externalInfoUrl="https://pmd.github.io/pmd-5.8.1/pmd-java/rules/java/coupling.html#LawOfDemeter" priority="3">
Potential violation of Law of Demeter (method chain calls)
</violation>
<violation beginline="123" endline="123" begincolumn="54" endcolumn="82" rule="LawOfDemeter" ruleset="Coupling" package="it.uniba.controller" class="ControllerTester" method="parsedChannelsMatchPrintedChannels" externalInfoUrl="https://pmd.github.io/pmd-5.8.1/pmd-java/rules/java/coupling.html#LawOfDemeter" priority="3">
Potential violation of Law of Demeter (method chain calls)
</violation>
<violation beginline="130" endline="130" begincolumn="23" endcolumn="46" rule="LawOfDemeter" ruleset="Coupling" package="it.uniba.controller" class="ControllerTester" method="parsedChannelsMatchPrintedChannels" externalInfoUrl="https://pmd.github.io/pmd-5.8.1/pmd-java/rules/java/coupling.html#LawOfDemeter" priority="3">
Potential violation of Law of Demeter (object not created locally)
</violation>
<violation beginline="131" endline="131" begincolumn="49" endcolumn="63" rule="LawOfDemeter" ruleset="Coupling" package="it.uniba.controller" class="ControllerTester" method="parsedChannelsMatchPrintedChannels" externalInfoUrl="https://pmd.github.io/pmd-5.8.1/pmd-java/rules/java/coupling.html#LawOfDemeter" priority="3">
Potential violation of Law of Demeter (object not created locally)
</violation>
<violation beginline="137" endline="137" begincolumn="43" endcolumn="133" rule="AvoidInstantiatingObjectsInLoops" ruleset="Optimization" package="it.uniba.controller" class="ControllerTester" method="parsedChannelsMatchPrintedChannels" externalInfoUrl="https://pmd.github.io/pmd-5.8.1/pmd-java/rules/java/optimizations.html#AvoidInstantiatingObjectsInLoops" priority="3">
Avoid instantiating new objects inside loops
</violation>
<violation beginline="137" endline="137" begincolumn="54" endcolumn="103" rule="LawOfDemeter" ruleset="Coupling" package="it.uniba.controller" class="ControllerTester" method="parsedChannelsMatchPrintedChannels" externalInfoUrl="https://pmd.github.io/pmd-5.8.1/pmd-java/rules/java/coupling.html#LawOfDemeter" priority="3">
Potential violation of Law of Demeter (method chain calls)
</violation>
<violation beginline="138" endline="138" begincolumn="41" endcolumn="138" rule="AvoidInstantiatingObjectsInLoops" ruleset="Optimization" package="it.uniba.controller" class="ControllerTester" method="parsedChannelsMatchPrintedChannels" externalInfoUrl="https://pmd.github.io/pmd-5.8.1/pmd-java/rules/java/optimizations.html#AvoidInstantiatingObjectsInLoops" priority="3">
Avoid instantiating new objects inside loops
</violation>
<violation beginline="138" endline="138" begincolumn="52" endcolumn="108" rule="LawOfDemeter" ruleset="Coupling" package="it.uniba.controller" class="ControllerTester" method="parsedChannelsMatchPrintedChannels" externalInfoUrl="https://pmd.github.io/pmd-5.8.1/pmd-java/rules/java/coupling.html#LawOfDemeter" priority="3">
Potential violation of Law of Demeter (method chain calls)
</violation>
<violation beginline="138" endline="138" begincolumn="52" endcolumn="108" rule="LawOfDemeter" ruleset="Coupling" package="it.uniba.controller" class="ControllerTester" method="parsedChannelsMatchPrintedChannels" externalInfoUrl="https://pmd.github.io/pmd-5.8.1/pmd-java/rules/java/coupling.html#LawOfDemeter" priority="3">
Potential violation of Law of Demeter (method chain calls)
</violation>
</file>
<file name="D:\Files\Progetti\Gradle\progetto1718-nygaard\src\test\java\it\uniba\controller\input\ParserInterpreterTest.java">
<violation beginline="29" endline="607" begincolumn="36" endcolumn="1" rule="TooManyMethods" ruleset="Code Size" package="it.uniba.controller.input" class="ParserInterpreterTest" externalInfoUrl="https://pmd.github.io/pmd-5.8.1/pmd-java/rules/java/codesize.html#TooManyMethods" priority="3">
This class has too many methods, consider refactoring it.
</violation>
<violation beginline="106" endline="106" begincolumn="47" endcolumn="65" rule="AvoidDuplicateLiterals" ruleset="String and StringBuffer" package="it.uniba.controller.input" class="ParserInterpreterTest" method="membersCalled" externalInfoUrl="https://pmd.github.io/pmd-5.8.1/pmd-java/rules/java/strings.html#AvoidDuplicateLiterals" priority="3">
The String literal &quot;.//res//ingsw.zip&quot; appears 34 times in this file; the first occurrence is on line 106
</violation>
<violation beginline="160" endline="160" begincolumn="75" endcolumn="82" rule="AvoidDuplicateLiterals" ruleset="String and StringBuffer" package="it.uniba.controller.input" class="ParserInterpreterTest" method="usersInChannelCalled" externalInfoUrl="https://pmd.github.io/pmd-5.8.1/pmd-java/rules/java/strings.html#AvoidDuplicateLiterals" priority="3">
The String literal &quot;micali&quot; appears 4 times in this file; the first occurrence is on line 160
</violation>
<violation beginline="178" endline="178" begincolumn="82" endcolumn="91" rule="AvoidDuplicateLiterals" ruleset="String and StringBuffer" package="it.uniba.controller.input" class="ParserInterpreterTest" method="fromInMentionCalled" externalInfoUrl="https://pmd.github.io/pmd-5.8.1/pmd-java/rules/java/strings.html#AvoidDuplicateLiterals" priority="3">
The String literal &quot;Lanubile&quot; appears 19 times in this file; the first occurrence is on line 178
</violation>
<violation beginline="178" endline="178" begincolumn="74" endcolumn="79" rule="AvoidDuplicateLiterals" ruleset="String and StringBuffer" package="it.uniba.controller.input" class="ParserInterpreterTest" method="fromInMentionCalled" externalInfoUrl="https://pmd.github.io/pmd-5.8.1/pmd-java/rules/java/strings.html#AvoidDuplicateLiterals" priority="3">
The String literal &quot;from&quot; appears 13 times in this file; the first occurrence is on line 178
</violation>
<violation beginline="178" endline="178" begincolumn="100" endcolumn="108" rule="AvoidDuplicateLiterals" ruleset="String and StringBuffer" package="it.uniba.controller.input" class="ParserInterpreterTest" method="fromInMentionCalled" externalInfoUrl="https://pmd.github.io/pmd-5.8.1/pmd-java/rules/java/strings.html#AvoidDuplicateLiterals" priority="3">
The String literal &quot;general&quot; appears 7 times in this file; the first occurrence is on line 178
</violation>
<violation beginline="408" endline="408" begincolumn="14" endcolumn="40" rule="MethodNamingConventions" ruleset="Naming" package="it.uniba.controller.input" class="ParserInterpreterTest" method="IllegalStateAfterMentions" externalInfoUrl="https://pmd.github.io/pmd-5.8.1/pmd-java/rules/java/naming.html#MethodNamingConventions" priority="1">
Method names should not start with capital letters
</violation>
<violation beginline="421" endline="421" begincolumn="17" endcolumn="67" rule="LawOfDemeter" ruleset="Coupling" package="it.uniba.controller.input" class="ParserInterpreterTest" method="baseArgsActive" externalInfoUrl="https://pmd.github.io/pmd-5.8.1/pmd-java/rules/java/coupling.html#LawOfDemeter" priority="3">
Potential violation of Law of Demeter (method chain calls)
</violation>
<violation beginline="421" endline="421" begincolumn="36" endcolumn="66" rule="LawOfDemeter" ruleset="Coupling" package="it.uniba.controller.input" class="ParserInterpreterTest" method="baseArgsActive" externalInfoUrl="https://pmd.github.io/pmd-5.8.1/pmd-java/rules/java/coupling.html#LawOfDemeter" priority="3">
Potential violation of Law of Demeter (method chain calls)
</violation>
<violation beginline="421" endline="421" begincolumn="17" endcolumn="67" rule="UseAssertTrueInsteadOfAssertEquals" ruleset="JUnit" package="it.uniba.controller.input" class="ParserInterpreterTest" method="baseArgsActive" externalInfoUrl="https://pmd.github.io/pmd-5.8.1/pmd-java/rules/java/junit.html#UseAssertTrueInsteadOfAssertEquals" priority="3">
Use assertTrue(x)/assertFalse(x) instead of assertEquals(true, x)/assertEquals(false, x)   or assertEquals(Boolean.TRUE, x)/assertEquals(Boolean.FALSE, x).
</violation>
<violation beginline="429" endline="429" begincolumn="17" endcolumn="81" rule="LawOfDemeter" ruleset="Coupling" package="it.uniba.controller.input" class="ParserInterpreterTest" method="commWorkspaceValid" externalInfoUrl="https://pmd.github.io/pmd-5.8.1/pmd-java/rules/java/coupling.html#LawOfDemeter" priority="3">
Potential violation of Law of Demeter (method chain calls)
</violation>
<violation beginline="429" endline="429" begincolumn="37" endcolumn="80" rule="LawOfDemeter" ruleset="Coupling" package="it.uniba.controller.input" class="ParserInterpreterTest" method="commWorkspaceValid" externalInfoUrl="https://pmd.github.io/pmd-5.8.1/pmd-java/rules/java/coupling.html#LawOfDemeter" priority="3">
Potential violation of Law of Demeter (method chain calls)
</violation>
<violation beginline="429" endline="429" begincolumn="17" endcolumn="81" rule="UseAssertTrueInsteadOfAssertEquals" ruleset="JUnit" package="it.uniba.controller.input" class="ParserInterpreterTest" method="commWorkspaceValid" externalInfoUrl="https://pmd.github.io/pmd-5.8.1/pmd-java/rules/java/junit.html#UseAssertTrueInsteadOfAssertEquals" priority="3">
Use assertTrue(x)/assertFalse(x) instead of assertEquals(true, x)/assertEquals(false, x)   or assertEquals(Boolean.TRUE, x)/assertEquals(Boolean.FALSE, x).
</violation>
<violation beginline="437" endline="437" begincolumn="17" endcolumn="78" rule="LawOfDemeter" ruleset="Coupling" package="it.uniba.controller.input" class="ParserInterpreterTest" method="commWorkspaceFilterValid" externalInfoUrl="https://pmd.github.io/pmd-5.8.1/pmd-java/rules/java/coupling.html#LawOfDemeter" priority="3">
Potential violation of Law of Demeter (method chain calls)
</violation>
<violation beginline="437" endline="437" begincolumn="37" endcolumn="77" rule="LawOfDemeter" ruleset="Coupling" package="it.uniba.controller.input" class="ParserInterpreterTest" method="commWorkspaceFilterValid" externalInfoUrl="https://pmd.github.io/pmd-5.8.1/pmd-java/rules/java/coupling.html#LawOfDemeter" priority="3">
Potential violation of Law of Demeter (method chain calls)
</violation>
<violation beginline="437" endline="437" begincolumn="17" endcolumn="78" rule="UseAssertTrueInsteadOfAssertEquals" ruleset="JUnit" package="it.uniba.controller.input" class="ParserInterpreterTest" method="commWorkspaceFilterValid" externalInfoUrl="https://pmd.github.io/pmd-5.8.1/pmd-java/rules/java/junit.html#UseAssertTrueInsteadOfAssertEquals" priority="3">
Use assertTrue(x)/assertFalse(x) instead of assertEquals(true, x)/assertEquals(false, x)   or assertEquals(Boolean.TRUE, x)/assertEquals(Boolean.FALSE, x).
</violation>
<violation beginline="445" endline="445" begincolumn="17" endcolumn="78" rule="LawOfDemeter" ruleset="Coupling" package="it.uniba.controller.input" class="ParserInterpreterTest" method="commWorkspaceFilterValid2" externalInfoUrl="https://pmd.github.io/pmd-5.8.1/pmd-java/rules/java/coupling.html#LawOfDemeter" priority="3">
Potential violation of Law of Demeter (method chain calls)
</violation>
<violation beginline="445" endline="445" begincolumn="37" endcolumn="77" rule="LawOfDemeter" ruleset="Coupling" package="it.uniba.controller.input" class="ParserInterpreterTest" method="commWorkspaceFilterValid2" externalInfoUrl="https://pmd.github.io/pmd-5.8.1/pmd-java/rules/java/coupling.html#LawOfDemeter" priority="3">
Potential violation of Law of Demeter (method chain calls)
</violation>
<violation beginline="445" endline="445" begincolumn="17" endcolumn="78" rule="UseAssertTrueInsteadOfAssertEquals" ruleset="JUnit" package="it.uniba.controller.input" class="ParserInterpreterTest" method="commWorkspaceFilterValid2" externalInfoUrl="https://pmd.github.io/pmd-5.8.1/pmd-java/rules/java/junit.html#UseAssertTrueInsteadOfAssertEquals" priority="3">
Use assertTrue(x)/assertFalse(x) instead of assertEquals(true, x)/assertEquals(false, x)   or assertEquals(Boolean.TRUE, x)/assertEquals(Boolean.FALSE, x).
</violation>
<violation beginline="453" endline="453" begincolumn="17" endcolumn="77" rule="LawOfDemeter" ruleset="Coupling" package="it.uniba.controller.input" class="ParserInterpreterTest" method="commWorkspaceFilterValid3" externalInfoUrl="https://pmd.github.io/pmd-5.8.1/pmd-java/rules/java/coupling.html#LawOfDemeter" priority="3">
Potential violation of Law of Demeter (method chain calls)
</violation>
<violation beginline="453" endline="453" begincolumn="36" endcolumn="76" rule="LawOfDemeter" ruleset="Coupling" package="it.uniba.controller.input" class="ParserInterpreterTest" method="commWorkspaceFilterValid3" externalInfoUrl="https://pmd.github.io/pmd-5.8.1/pmd-java/rules/java/coupling.html#LawOfDemeter" priority="3">
Potential violation of Law of Demeter (method chain calls)
</violation>
<violation beginline="453" endline="453" begincolumn="17" endcolumn="77" rule="UseAssertTrueInsteadOfAssertEquals" ruleset="JUnit" package="it.uniba.controller.input" class="ParserInterpreterTest" method="commWorkspaceFilterValid3" externalInfoUrl="https://pmd.github.io/pmd-5.8.1/pmd-java/rules/java/junit.html#UseAssertTrueInsteadOfAssertEquals" priority="3">
Use assertTrue(x)/assertFalse(x) instead of assertEquals(true, x)/assertEquals(false, x)   or assertEquals(Boolean.TRUE, x)/assertEquals(Boolean.FALSE, x).
</violation>
<violation beginline="463" endline="463" begincolumn="17" endcolumn="94" rule="LawOfDemeter" ruleset="Coupling" package="it.uniba.controller.input" class="ParserInterpreterTest" method="commWorkspaceMentionParamsValid" externalInfoUrl="https://pmd.github.io/pmd-5.8.1/pmd-java/rules/java/coupling.html#LawOfDemeter" priority="3">
Potential violation of Law of Demeter (method chain calls)
</violation>
<violation beginline="463" endline="463" begincolumn="50" endcolumn="93" rule="LawOfDemeter" ruleset="Coupling" package="it.uniba.controller.input" class="ParserInterpreterTest" method="commWorkspaceMentionParamsValid" externalInfoUrl="https://pmd.github.io/pmd-5.8.1/pmd-java/rules/java/coupling.html#LawOfDemeter" priority="3">
Potential violation of Law of Demeter (method chain calls)
</violation>
<violation beginline="472" endline="472" begincolumn="17" endcolumn="54" rule="UseAssertTrueInsteadOfAssertEquals" ruleset="JUnit" package="it.uniba.controller.input" class="ParserInterpreterTest" method="commWorkspaceNull" externalInfoUrl="https://pmd.github.io/pmd-5.8.1/pmd-java/rules/java/junit.html#UseAssertTrueInsteadOfAssertEquals" priority="3">
Use assertTrue(x)/assertFalse(x) instead of assertEquals(true, x)/assertEquals(false, x)   or assertEquals(Boolean.TRUE, x)/assertEquals(Boolean.FALSE, x).
</violation>
<violation beginline="481" endline="481" begincolumn="17" endcolumn="54" rule="UseAssertTrueInsteadOfAssertEquals" ruleset="JUnit" package="it.uniba.controller.input" class="ParserInterpreterTest" method="fromInterfaceTest" externalInfoUrl="https://pmd.github.io/pmd-5.8.1/pmd-java/rules/java/junit.html#UseAssertTrueInsteadOfAssertEquals" priority="3">
Use assertTrue(x)/assertFalse(x) instead of assertEquals(true, x)/assertEquals(false, x)   or assertEquals(Boolean.TRUE, x)/assertEquals(Boolean.FALSE, x).
</violation>
<violation beginline="490" endline="490" begincolumn="17" endcolumn="67" rule="LawOfDemeter" ruleset="Coupling" package="it.uniba.controller.input" class="ParserInterpreterTest" method="fromWhoInterfaceTest" externalInfoUrl="https://pmd.github.io/pmd-5.8.1/pmd-java/rules/java/coupling.html#LawOfDemeter" priority="3">
Potential violation of Law of Demeter (method chain calls)
</violation>
<violation beginline="499" endline="499" begincolumn="48" endcolumn="54" rule="AvoidDuplicateLiterals" ruleset="String and StringBuffer" package="it.uniba.controller.input" class="ParserInterpreterTest" method="fromWhoInterfaceTest2" externalInfoUrl="https://pmd.github.io/pmd-5.8.1/pmd-java/rules/java/strings.html#AvoidDuplicateLiterals" priority="3">
The String literal &quot;pippo&quot; appears 6 times in this file; the first occurrence is on line 499
</violation>
<violation beginline="501" endline="501" begincolumn="17" endcolumn="67" rule="LawOfDemeter" ruleset="Coupling" package="it.uniba.controller.input" class="ParserInterpreterTest" method="fromWhoInterfaceTest2" externalInfoUrl="https://pmd.github.io/pmd-5.8.1/pmd-java/rules/java/coupling.html#LawOfDemeter" priority="3">
Potential violation of Law of Demeter (method chain calls)
</violation>
<violation beginline="512" endline="512" begincolumn="17" endcolumn="67" rule="LawOfDemeter" ruleset="Coupling" package="it.uniba.controller.input" class="ParserInterpreterTest" method="fromWhoInterfaceTest3" externalInfoUrl="https://pmd.github.io/pmd-5.8.1/pmd-java/rules/java/coupling.html#LawOfDemeter" priority="3">
Potential violation of Law of Demeter (method chain calls)
</violation>
<violation beginline="523" endline="523" begincolumn="17" endcolumn="67" rule="LawOfDemeter" ruleset="Coupling" package="it.uniba.controller.input" class="ParserInterpreterTest" method="fromWhoInterfaceTest4" externalInfoUrl="https://pmd.github.io/pmd-5.8.1/pmd-java/rules/java/coupling.html#LawOfDemeter" priority="3">
Potential violation of Law of Demeter (method chain calls)
</violation>
<violation beginline="534" endline="534" begincolumn="17" endcolumn="67" rule="LawOfDemeter" ruleset="Coupling" package="it.uniba.controller.input" class="ParserInterpreterTest" method="toWhoInterfaceTest" externalInfoUrl="https://pmd.github.io/pmd-5.8.1/pmd-java/rules/java/coupling.html#LawOfDemeter" priority="3">
Potential violation of Law of Demeter (method chain calls)
</violation>
<violation beginline="564" endline="564" begincolumn="17" endcolumn="50" rule="LocalVariableCouldBeFinal" ruleset="Optimization" package="it.uniba.controller.input" class="ParserInterpreterTest" method="getWorkspaceNameTest" variable="zipper" externalInfoUrl="https://pmd.github.io/pmd-5.8.1/pmd-java/rules/java/optimizations.html#LocalVariableCouldBeFinal" priority="3">
Local variable 'zipper' could be declared final
</violation>
<violation beginline="573" endline="573" begincolumn="17" endcolumn="50" rule="LocalVariableCouldBeFinal" ruleset="Optimization" package="it.uniba.controller.input" class="ParserInterpreterTest" method="setWorkspaceNameTest" variable="zipper" externalInfoUrl="https://pmd.github.io/pmd-5.8.1/pmd-java/rules/java/optimizations.html#LocalVariableCouldBeFinal" priority="3">
Local variable 'zipper' could be declared final
</violation>
<violation beginline="583" endline="583" begincolumn="17" endcolumn="50" rule="LocalVariableCouldBeFinal" ruleset="Optimization" package="it.uniba.controller.input" class="ParserInterpreterTest" method="hasLoadedTest" variable="zipper" externalInfoUrl="https://pmd.github.io/pmd-5.8.1/pmd-java/rules/java/optimizations.html#LocalVariableCouldBeFinal" priority="3">
Local variable 'zipper' could be declared final
</violation>
<violation beginline="585" endline="585" begincolumn="17" endcolumn="54" rule="UseAssertTrueInsteadOfAssertEquals" ruleset="JUnit" package="it.uniba.controller.input" class="ParserInterpreterTest" method="hasLoadedTest" externalInfoUrl="https://pmd.github.io/pmd-5.8.1/pmd-java/rules/java/junit.html#UseAssertTrueInsteadOfAssertEquals" priority="3">
Use assertTrue(x)/assertFalse(x) instead of assertEquals(true, x)/assertEquals(false, x)   or assertEquals(Boolean.TRUE, x)/assertEquals(Boolean.FALSE, x).
</violation>
<violation beginline="592" endline="592" begincolumn="17" endcolumn="50" rule="LocalVariableCouldBeFinal" ruleset="Optimization" package="it.uniba.controller.input" class="ParserInterpreterTest" method="hasLoadedFalseTest" variable="zipper" externalInfoUrl="https://pmd.github.io/pmd-5.8.1/pmd-java/rules/java/optimizations.html#LocalVariableCouldBeFinal" priority="3">
Local variable 'zipper' could be declared final
</violation>
<violation beginline="595" endline="595" begincolumn="17" endcolumn="55" rule="UseAssertTrueInsteadOfAssertEquals" ruleset="JUnit" package="it.uniba.controller.input" class="ParserInterpreterTest" method="hasLoadedFalseTest" externalInfoUrl="https://pmd.github.io/pmd-5.8.1/pmd-java/rules/java/junit.html#UseAssertTrueInsteadOfAssertEquals" priority="3">
Use assertTrue(x)/assertFalse(x) instead of assertEquals(true, x)/assertEquals(false, x)   or assertEquals(Boolean.TRUE, x)/assertEquals(Boolean.FALSE, x).
</violation>
<violation beginline="602" endline="602" begincolumn="17" endcolumn="50" rule="LocalVariableCouldBeFinal" ruleset="Optimization" package="it.uniba.controller.input" class="ParserInterpreterTest" method="fakeZipperTest" variable="zipper" externalInfoUrl="https://pmd.github.io/pmd-5.8.1/pmd-java/rules/java/optimizations.html#LocalVariableCouldBeFinal" priority="3">
Local variable 'zipper' could be declared final
</violation>
</file>
<file name="D:\Files\Progetti\Gradle\progetto1718-nygaard\src\test\java\it\uniba\model\EdgeTester.java">
<violation beginline="1" endline="68" begincolumn="1" endcolumn="3" rule="TooManyStaticImports" ruleset="Import Statements" package="it.uniba.model" class="EdgeTester" externalInfoUrl="https://pmd.github.io/pmd-5.8.1/pmd-java/rules/java/imports.html#TooManyStaticImports" priority="3">
Too many static imports may lead to messy code
</violation>
<violation beginline="19" endline="19" begincolumn="22" endcolumn="31" rule="RedundantFieldInitializer" ruleset="Optimization" package="it.uniba.model" class="EdgeTester" variable="mod" externalInfoUrl="https://pmd.github.io/pmd-5.8.1/pmd-java/rules/java/optimizations.html#RedundantFieldInitializer" priority="3">
Avoid using redundant field initializer for 'mod'
</violation>
<violation beginline="20" endline="20" begincolumn="21" endcolumn="33" rule="RedundantFieldInitializer" ruleset="Optimization" package="it.uniba.model" class="EdgeTester" variable="u_from" externalInfoUrl="https://pmd.github.io/pmd-5.8.1/pmd-java/rules/java/optimizations.html#RedundantFieldInitializer" priority="3">
Avoid using redundant field initializer for 'u_from'
</violation>
<violation beginline="20" endline="20" begincolumn="21" endcolumn="26" rule="VariableNamingConventions" ruleset="Naming" package="it.uniba.model" class="EdgeTester" variable="u_from" externalInfoUrl="https://pmd.github.io/pmd-5.8.1/pmd-java/rules/java/naming.html#VariableNamingConventions" priority="1">
Only variables that are final should contain underscores (except for underscores in standard prefix/suffix), 'u_from' is not final.
</violation>
<violation beginline="21" endline="21" begincolumn="21" endcolumn="31" rule="RedundantFieldInitializer" ruleset="Optimization" package="it.uniba.model" class="EdgeTester" variable="v_to" externalInfoUrl="https://pmd.github.io/pmd-5.8.1/pmd-java/rules/java/optimizations.html#RedundantFieldInitializer" priority="3">
Avoid using redundant field initializer for 'v_to'
</violation>
<violation beginline="21" endline="21" begincolumn="21" endcolumn="24" rule="VariableNamingConventions" ruleset="Naming" package="it.uniba.model" class="EdgeTester" variable="v_to" externalInfoUrl="https://pmd.github.io/pmd-5.8.1/pmd-java/rules/java/naming.html#VariableNamingConventions" priority="1">
Only variables that are final should contain underscores (except for underscores in standard prefix/suffix), 'v_to' is not final.
</violation>
<violation beginline="22" endline="22" begincolumn="21" endcolumn="35" rule="RedundantFieldInitializer" ruleset="Optimization" package="it.uniba.model" class="EdgeTester" variable="edgeTest" externalInfoUrl="https://pmd.github.io/pmd-5.8.1/pmd-java/rules/java/optimizations.html#RedundantFieldInitializer" priority="3">
Avoid using redundant field initializer for 'edgeTest'
</violation>
<violation beginline="25" endline="25" begincolumn="21" endcolumn="26" rule="MethodNamingConventions" ruleset="Naming" package="it.uniba.model" class="EdgeTester" method="Init" externalInfoUrl="https://pmd.github.io/pmd-5.8.1/pmd-java/rules/java/naming.html#MethodNamingConventions" priority="1">
Method names should not start with capital letters
</violation>
<violation beginline="45" endline="45" begincolumn="22" endcolumn="23" rule="ShortVariable" ruleset="Naming" package="it.uniba.model" class="EdgeTester" method="failedEdgeEqualsTest" variable="ed" externalInfoUrl="https://pmd.github.io/pmd-5.8.1/pmd-java/rules/java/naming.html#ShortVariable" priority="3">
Avoid variables with short names like ed
</violation>
<violation beginline="45" endline="45" begincolumn="17" endcolumn="36" rule="LocalVariableCouldBeFinal" ruleset="Optimization" package="it.uniba.model" class="EdgeTester" method="failedEdgeEqualsTest" variable="ed" externalInfoUrl="https://pmd.github.io/pmd-5.8.1/pmd-java/rules/java/optimizations.html#LocalVariableCouldBeFinal" priority="3">
Local variable 'ed' could be declared final
</violation>
</file>
<file name="D:\Files\Progetti\Gradle\progetto1718-nygaard\src\test\java\it\uniba\model\MentionGraphTest.java">
<violation beginline="15" endline="15" begincolumn="1" endcolumn="27" rule="ImportFromSamePackage" ruleset="Import Statements" package="it.uniba.model" class="MentionGraphTest" externalInfoUrl="https://pmd.github.io/pmd-5.8.1/pmd-java/rules/java/imports.html#ImportFromSamePackage" priority="3">
No need to import a type that lives in the same package
</violation>
<violation beginline="16" endline="16" begincolumn="1" endcolumn="28" rule="ImportFromSamePackage" ruleset="Import Statements" package="it.uniba.model" class="MentionGraphTest" externalInfoUrl="https://pmd.github.io/pmd-5.8.1/pmd-java/rules/java/imports.html#ImportFromSamePackage" priority="3">
No need to import a type that lives in the same package
</violation>
<violation beginline="20" endline="164" begincolumn="31" endcolumn="1" rule="TooManyMethods" ruleset="Code Size" package="it.uniba.model" class="MentionGraphTest" externalInfoUrl="https://pmd.github.io/pmd-5.8.1/pmd-java/rules/java/codesize.html#TooManyMethods" priority="3">
This class has too many methods, consider refactoring it.
</violation>
<violation beginline="21" endline="21" begincolumn="16" endcolumn="41" rule="LooseCoupling" ruleset="Type Resolution" package="it.uniba.model" class="MentionGraphTest" externalInfoUrl="https://pmd.github.io/pmd-5.8.1/pmd-java/rules/java/typeresolution.html#LooseCoupling" priority="3">
Avoid using implementation types like 'ArrayList'; use the interface instead
</violation>
<violation beginline="21" endline="21" begincolumn="16" endcolumn="41" rule="LooseCoupling" ruleset="Coupling" package="it.uniba.model" class="MentionGraphTest" externalInfoUrl="https://pmd.github.io/pmd-5.8.1/pmd-java/rules/java/coupling.html#LooseCoupling" priority="3">
Avoid using implementation types like 'ArrayList'; use the interface instead
</violation>
<violation beginline="22" endline="22" begincolumn="16" endcolumn="30" rule="LooseCoupling" ruleset="Type Resolution" package="it.uniba.model" class="MentionGraphTest" externalInfoUrl="https://pmd.github.io/pmd-5.8.1/pmd-java/rules/java/typeresolution.html#LooseCoupling" priority="3">
Avoid using implementation types like 'ArrayList'; use the interface instead
</violation>
<violation beginline="22" endline="22" begincolumn="16" endcolumn="30" rule="LooseCoupling" ruleset="Coupling" package="it.uniba.model" class="MentionGraphTest" externalInfoUrl="https://pmd.github.io/pmd-5.8.1/pmd-java/rules/java/coupling.html#LooseCoupling" priority="3">
Avoid using implementation types like 'ArrayList'; use the interface instead
</violation>
<violation beginline="22" endline="22" begincolumn="32" endcolumn="33" rule="ShortVariable" ruleset="Naming" package="it.uniba.model" class="MentionGraphTest" variable="ed" externalInfoUrl="https://pmd.github.io/pmd-5.8.1/pmd-java/rules/java/naming.html#ShortVariable" priority="3">
Avoid variables with short names like ed
</violation>
<violation beginline="24" endline="24" begincolumn="22" endcolumn="31" rule="RedundantFieldInitializer" ruleset="Optimization" package="it.uniba.model" class="MentionGraphTest" variable="mod" externalInfoUrl="https://pmd.github.io/pmd-5.8.1/pmd-java/rules/java/optimizations.html#RedundantFieldInitializer" priority="3">
Avoid using redundant field initializer for 'mod'
</violation>
<violation beginline="26" endline="26" begincolumn="21" endcolumn="33" rule="RedundantFieldInitializer" ruleset="Optimization" package="it.uniba.model" class="MentionGraphTest" variable="u_from" externalInfoUrl="https://pmd.github.io/pmd-5.8.1/pmd-java/rules/java/optimizations.html#RedundantFieldInitializer" priority="3">
Avoid using redundant field initializer for 'u_from'
</violation>
<violation beginline="26" endline="26" begincolumn="21" endcolumn="26" rule="VariableNamingConventions" ruleset="Naming" package="it.uniba.model" class="MentionGraphTest" variable="u_from" externalInfoUrl="https://pmd.github.io/pmd-5.8.1/pmd-java/rules/java/naming.html#VariableNamingConventions" priority="1">
Only variables that are final should contain underscores (except for underscores in standard prefix/suffix), 'u_from' is not final.
</violation>
<violation beginline="27" endline="27" begincolumn="21" endcolumn="31" rule="RedundantFieldInitializer" ruleset="Optimization" package="it.uniba.model" class="MentionGraphTest" variable="v_to" externalInfoUrl="https://pmd.github.io/pmd-5.8.1/pmd-java/rules/java/optimizations.html#RedundantFieldInitializer" priority="3">
Avoid using redundant field initializer for 'v_to'
</violation>
<violation beginline="27" endline="27" begincolumn="21" endcolumn="24" rule="VariableNamingConventions" ruleset="Naming" package="it.uniba.model" class="MentionGraphTest" variable="v_to" externalInfoUrl="https://pmd.github.io/pmd-5.8.1/pmd-java/rules/java/naming.html#VariableNamingConventions" priority="1">
Only variables that are final should contain underscores (except for underscores in standard prefix/suffix), 'v_to' is not final.
</violation>
<violation beginline="28" endline="28" begincolumn="35" endcolumn="45" rule="VariableNamingConventions" ruleset="Naming" package="it.uniba.model" class="MentionGraphTest" variable="testerGraph" externalInfoUrl="https://pmd.github.io/pmd-5.8.1/pmd-java/rules/java/naming.html#VariableNamingConventions" priority="1">
Variables that are final and static should be all capitals, 'testerGraph' is not all capitals.
</violation>
<violation beginline="31" endline="31" begincolumn="21" endcolumn="26" rule="MethodNamingConventions" ruleset="Naming" package="it.uniba.model" class="MentionGraphTest" method="Init" externalInfoUrl="https://pmd.github.io/pmd-5.8.1/pmd-java/rules/java/naming.html#MethodNamingConventions" priority="1">
Method names should not start with capital letters
</violation>
<violation beginline="125" endline="125" begincolumn="26" endcolumn="34" rule="AvoidCatchingGenericException" ruleset="Strict Exceptions" package="it.uniba.model" class="MentionGraphTest" method="failedThrowGenerateOnFilledModel" externalInfoUrl="https://pmd.github.io/pmd-5.8.1/pmd-java/rules/java/strictexception.html#AvoidCatchingGenericException" priority="3">
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
</violation>
</file>
<file name="D:\Files\Progetti\Gradle\progetto1718-nygaard\src\test\java\it\uniba\workdata\ChannelTester.java">
<violation beginline="11" endline="11" begincolumn="16" endcolumn="32" rule="LooseCoupling" ruleset="Type Resolution" package="it.uniba.workdata" class="ChannelTester" externalInfoUrl="https://pmd.github.io/pmd-5.8.1/pmd-java/rules/java/typeresolution.html#LooseCoupling" priority="3">
Avoid using implementation types like 'ArrayList'; use the interface instead
</violation>
<violation beginline="11" endline="11" begincolumn="16" endcolumn="32" rule="LooseCoupling" ruleset="Coupling" package="it.uniba.workdata" class="ChannelTester" externalInfoUrl="https://pmd.github.io/pmd-5.8.1/pmd-java/rules/java/coupling.html#LooseCoupling" priority="3">
Avoid using implementation types like 'ArrayList'; use the interface instead
</violation>
<violation beginline="25" endline="25" begincolumn="14" endcolumn="32" rule="JUnitTestContainsTooManyAsserts" ruleset="JUnit" package="it.uniba.workdata" class="ChannelTester" method="channelGetterTest" externalInfoUrl="https://pmd.github.io/pmd-5.8.1/pmd-java/rules/java/junit.html#JUnitTestContainsTooManyAsserts" priority="3">
JUnit tests should not contain more than 1 assert(s).
</violation>
</file>
</pmd>
